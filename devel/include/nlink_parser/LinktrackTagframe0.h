// Generated by gencpp from file nlink_parser/LinktrackTagframe0.msg
// DO NOT EDIT!


#ifndef NLINK_PARSER_MESSAGE_LINKTRACKTAGFRAME0_H
#define NLINK_PARSER_MESSAGE_LINKTRACKTAGFRAME0_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nlink_parser
{
template <class ContainerAllocator>
struct LinktrackTagframe0_
{
  typedef LinktrackTagframe0_<ContainerAllocator> Type;

  LinktrackTagframe0_()
    : role(0)
    , id(0)
    , localTime(0)
    , systemTime(0)
    , voltage(0.0)
    , pos()
    , eop()
    , vel()
    , dis()
    , angle()
    , q()
    , imuGyro()
    , imuAcc()  {
      pos.assign(0.0);

      eop.assign(0.0);

      vel.assign(0.0);

      dis.assign(0.0);

      angle.assign(0.0);

      q.assign(0.0);

      imuGyro.assign(0.0);

      imuAcc.assign(0.0);
  }
  LinktrackTagframe0_(const ContainerAllocator& _alloc)
    : role(0)
    , id(0)
    , localTime(0)
    , systemTime(0)
    , voltage(0.0)
    , pos()
    , eop()
    , vel()
    , dis()
    , angle()
    , q()
    , imuGyro()
    , imuAcc()  {
  (void)_alloc;
      pos.assign(0.0);

      eop.assign(0.0);

      vel.assign(0.0);

      dis.assign(0.0);

      angle.assign(0.0);

      q.assign(0.0);

      imuGyro.assign(0.0);

      imuAcc.assign(0.0);
  }



   typedef uint8_t _role_type;
  _role_type role;

   typedef uint8_t _id_type;
  _id_type id;

   typedef uint32_t _localTime_type;
  _localTime_type localTime;

   typedef uint32_t _systemTime_type;
  _systemTime_type systemTime;

   typedef float _voltage_type;
  _voltage_type voltage;

   typedef boost::array<float, 3>  _pos_type;
  _pos_type pos;

   typedef boost::array<float, 3>  _eop_type;
  _eop_type eop;

   typedef boost::array<float, 3>  _vel_type;
  _vel_type vel;

   typedef boost::array<float, 8>  _dis_type;
  _dis_type dis;

   typedef boost::array<float, 3>  _angle_type;
  _angle_type angle;

   typedef boost::array<float, 4>  _q_type;
  _q_type q;

   typedef boost::array<float, 3>  _imuGyro_type;
  _imuGyro_type imuGyro;

   typedef boost::array<float, 3>  _imuAcc_type;
  _imuAcc_type imuAcc;





  typedef boost::shared_ptr< ::nlink_parser::LinktrackTagframe0_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nlink_parser::LinktrackTagframe0_<ContainerAllocator> const> ConstPtr;

}; // struct LinktrackTagframe0_

typedef ::nlink_parser::LinktrackTagframe0_<std::allocator<void> > LinktrackTagframe0;

typedef boost::shared_ptr< ::nlink_parser::LinktrackTagframe0 > LinktrackTagframe0Ptr;
typedef boost::shared_ptr< ::nlink_parser::LinktrackTagframe0 const> LinktrackTagframe0ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nlink_parser::LinktrackTagframe0_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nlink_parser::LinktrackTagframe0_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nlink_parser::LinktrackTagframe0_<ContainerAllocator1> & lhs, const ::nlink_parser::LinktrackTagframe0_<ContainerAllocator2> & rhs)
{
  return lhs.role == rhs.role &&
    lhs.id == rhs.id &&
    lhs.localTime == rhs.localTime &&
    lhs.systemTime == rhs.systemTime &&
    lhs.voltage == rhs.voltage &&
    lhs.pos == rhs.pos &&
    lhs.eop == rhs.eop &&
    lhs.vel == rhs.vel &&
    lhs.dis == rhs.dis &&
    lhs.angle == rhs.angle &&
    lhs.q == rhs.q &&
    lhs.imuGyro == rhs.imuGyro &&
    lhs.imuAcc == rhs.imuAcc;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nlink_parser::LinktrackTagframe0_<ContainerAllocator1> & lhs, const ::nlink_parser::LinktrackTagframe0_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nlink_parser

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::nlink_parser::LinktrackTagframe0_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nlink_parser::LinktrackTagframe0_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nlink_parser::LinktrackTagframe0_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nlink_parser::LinktrackTagframe0_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nlink_parser::LinktrackTagframe0_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nlink_parser::LinktrackTagframe0_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nlink_parser::LinktrackTagframe0_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8ebca36ddb94a2e2d90a297e36f75a4b";
  }

  static const char* value(const ::nlink_parser::LinktrackTagframe0_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8ebca36ddb94a2e2ULL;
  static const uint64_t static_value2 = 0xd90a297e36f75a4bULL;
};

template<class ContainerAllocator>
struct DataType< ::nlink_parser::LinktrackTagframe0_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nlink_parser/LinktrackTagframe0";
  }

  static const char* value(const ::nlink_parser::LinktrackTagframe0_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nlink_parser::LinktrackTagframe0_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 role\n"
"uint8 id\n"
"uint32 localTime\n"
"uint32 systemTime\n"
"float32 voltage\n"
"float32[3] pos\n"
"float32[3] eop\n"
"float32[3] vel\n"
"float32[8] dis\n"
"float32[3] angle\n"
"float32[4] q\n"
"float32[3] imuGyro\n"
"float32[3] imuAcc\n"
"\n"
;
  }

  static const char* value(const ::nlink_parser::LinktrackTagframe0_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nlink_parser::LinktrackTagframe0_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.role);
      stream.next(m.id);
      stream.next(m.localTime);
      stream.next(m.systemTime);
      stream.next(m.voltage);
      stream.next(m.pos);
      stream.next(m.eop);
      stream.next(m.vel);
      stream.next(m.dis);
      stream.next(m.angle);
      stream.next(m.q);
      stream.next(m.imuGyro);
      stream.next(m.imuAcc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LinktrackTagframe0_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nlink_parser::LinktrackTagframe0_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nlink_parser::LinktrackTagframe0_<ContainerAllocator>& v)
  {
    s << indent << "role: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.role);
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "localTime: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.localTime);
    s << indent << "systemTime: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.systemTime);
    s << indent << "voltage: ";
    Printer<float>::stream(s, indent + "  ", v.voltage);
    s << indent << "pos[]" << std::endl;
    for (size_t i = 0; i < v.pos.size(); ++i)
    {
      s << indent << "  pos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pos[i]);
    }
    s << indent << "eop[]" << std::endl;
    for (size_t i = 0; i < v.eop.size(); ++i)
    {
      s << indent << "  eop[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.eop[i]);
    }
    s << indent << "vel[]" << std::endl;
    for (size_t i = 0; i < v.vel.size(); ++i)
    {
      s << indent << "  vel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.vel[i]);
    }
    s << indent << "dis[]" << std::endl;
    for (size_t i = 0; i < v.dis.size(); ++i)
    {
      s << indent << "  dis[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.dis[i]);
    }
    s << indent << "angle[]" << std::endl;
    for (size_t i = 0; i < v.angle.size(); ++i)
    {
      s << indent << "  angle[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.angle[i]);
    }
    s << indent << "q[]" << std::endl;
    for (size_t i = 0; i < v.q.size(); ++i)
    {
      s << indent << "  q[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.q[i]);
    }
    s << indent << "imuGyro[]" << std::endl;
    for (size_t i = 0; i < v.imuGyro.size(); ++i)
    {
      s << indent << "  imuGyro[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.imuGyro[i]);
    }
    s << indent << "imuAcc[]" << std::endl;
    for (size_t i = 0; i < v.imuAcc.size(); ++i)
    {
      s << indent << "  imuAcc[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.imuAcc[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NLINK_PARSER_MESSAGE_LINKTRACKTAGFRAME0_H
