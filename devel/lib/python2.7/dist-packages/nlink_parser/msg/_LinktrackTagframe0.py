# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from nlink_parser/LinktrackTagframe0.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LinktrackTagframe0(genpy.Message):
  _md5sum = "8ebca36ddb94a2e2d90a297e36f75a4b"
  _type = "nlink_parser/LinktrackTagframe0"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 role
uint8 id
uint32 localTime
uint32 systemTime
float32 voltage
float32[3] pos
float32[3] eop
float32[3] vel
float32[8] dis
float32[3] angle
float32[4] q
float32[3] imuGyro
float32[3] imuAcc

"""
  __slots__ = ['role','id','localTime','systemTime','voltage','pos','eop','vel','dis','angle','q','imuGyro','imuAcc']
  _slot_types = ['uint8','uint8','uint32','uint32','float32','float32[3]','float32[3]','float32[3]','float32[8]','float32[3]','float32[4]','float32[3]','float32[3]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       role,id,localTime,systemTime,voltage,pos,eop,vel,dis,angle,q,imuGyro,imuAcc

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LinktrackTagframe0, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.role is None:
        self.role = 0
      if self.id is None:
        self.id = 0
      if self.localTime is None:
        self.localTime = 0
      if self.systemTime is None:
        self.systemTime = 0
      if self.voltage is None:
        self.voltage = 0.
      if self.pos is None:
        self.pos = [0.] * 3
      if self.eop is None:
        self.eop = [0.] * 3
      if self.vel is None:
        self.vel = [0.] * 3
      if self.dis is None:
        self.dis = [0.] * 8
      if self.angle is None:
        self.angle = [0.] * 3
      if self.q is None:
        self.q = [0.] * 4
      if self.imuGyro is None:
        self.imuGyro = [0.] * 3
      if self.imuAcc is None:
        self.imuAcc = [0.] * 3
    else:
      self.role = 0
      self.id = 0
      self.localTime = 0
      self.systemTime = 0
      self.voltage = 0.
      self.pos = [0.] * 3
      self.eop = [0.] * 3
      self.vel = [0.] * 3
      self.dis = [0.] * 8
      self.angle = [0.] * 3
      self.q = [0.] * 4
      self.imuGyro = [0.] * 3
      self.imuAcc = [0.] * 3

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B2If().pack(_x.role, _x.id, _x.localTime, _x.systemTime, _x.voltage))
      buff.write(_get_struct_3f().pack(*self.pos))
      buff.write(_get_struct_3f().pack(*self.eop))
      buff.write(_get_struct_3f().pack(*self.vel))
      buff.write(_get_struct_8f().pack(*self.dis))
      buff.write(_get_struct_3f().pack(*self.angle))
      buff.write(_get_struct_4f().pack(*self.q))
      buff.write(_get_struct_3f().pack(*self.imuGyro))
      buff.write(_get_struct_3f().pack(*self.imuAcc))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.role, _x.id, _x.localTime, _x.systemTime, _x.voltage,) = _get_struct_2B2If().unpack(str[start:end])
      start = end
      end += 12
      self.pos = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.eop = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.vel = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 32
      self.dis = _get_struct_8f().unpack(str[start:end])
      start = end
      end += 12
      self.angle = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 16
      self.q = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 12
      self.imuGyro = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.imuAcc = _get_struct_3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B2If().pack(_x.role, _x.id, _x.localTime, _x.systemTime, _x.voltage))
      buff.write(self.pos.tostring())
      buff.write(self.eop.tostring())
      buff.write(self.vel.tostring())
      buff.write(self.dis.tostring())
      buff.write(self.angle.tostring())
      buff.write(self.q.tostring())
      buff.write(self.imuGyro.tostring())
      buff.write(self.imuAcc.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.role, _x.id, _x.localTime, _x.systemTime, _x.voltage,) = _get_struct_2B2If().unpack(str[start:end])
      start = end
      end += 12
      self.pos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.eop = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.vel = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 32
      self.dis = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=8)
      start = end
      end += 12
      self.angle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 16
      self.q = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 12
      self.imuGyro = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.imuAcc = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B2If = None
def _get_struct_2B2If():
    global _struct_2B2If
    if _struct_2B2If is None:
        _struct_2B2If = struct.Struct("<2B2If")
    return _struct_2B2If
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_8f = None
def _get_struct_8f():
    global _struct_8f
    if _struct_8f is None:
        _struct_8f = struct.Struct("<8f")
    return _struct_8f
